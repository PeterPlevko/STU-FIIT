/* tslint:disable */
/* eslint-disable */
/**
 * Projekt Api
 * Projekt management
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aa@bb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Ambulance
 */
export interface Ambulance {
    /**
     * Id of the ambulance
     * @type {string}
     * @memberof Ambulance
     */
    'id': string;
    /**
     * Human readable display name of the ambulance
     * @type {string}
     * @memberof Ambulance
     */
    'name': string;
    /**
     * Name of the doctor
     * @type {string}
     * @memberof Ambulance
     */
    'doctorName': string;
    /**
     * Where it\'s at
     * @type {string}
     * @memberof Ambulance
     */
    'location': string;
}
/**
 * 
 * @export
 * @interface AmbulanceWithAppointmentInfo
 */
export interface AmbulanceWithAppointmentInfo {
    /**
     * cost in cents
     * @type {number}
     * @memberof AmbulanceWithAppointmentInfo
     */
    'moneySum': number;
    /**
     * 
     * @type {Ambulance}
     * @memberof AmbulanceWithAppointmentInfo
     */
    'ambulance': Ambulance;
    /**
     * 
     * @type {Array<MedicalAppointment>}
     * @memberof AmbulanceWithAppointmentInfo
     */
    'appointments'?: Array<MedicalAppointment>;
}
/**
 * 
 * @export
 * @interface MedicalAppointment
 */
export interface MedicalAppointment {
    /**
     * Unique id of the entry
     * @type {string}
     * @memberof MedicalAppointment
     */
    'id': string;
    /**
     * Name of patient
     * @type {string}
     * @memberof MedicalAppointment
     */
    'patientName': string;
    /**
     * id of ambulance where the appointment happened
     * @type {string}
     * @memberof MedicalAppointment
     */
    'ambulanceId': string;
    /**
     * Type of the appointment
     * @type {string}
     * @memberof MedicalAppointment
     */
    'type': string;
    /**
     * date
     * @type {string}
     * @memberof MedicalAppointment
     */
    'dateTime': string;
    /**
     * cost paid in euros
     * @type {number}
     * @memberof MedicalAppointment
     */
    'cost': number;
    /**
     * who paid for the appointment
     * @type {string}
     * @memberof MedicalAppointment
     */
    'paidBy': string;
}

/**
 * AmbulanceAdminsApi - axios parameter creator
 * @export
 */
export const AmbulanceAdminsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * create new ambulance
         * @summary Creates new ambulance
         * @param {Ambulance} ambulance Ambulance template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAmbulance: async (ambulance: Ambulance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulance' is not null or undefined
            assertParamExists('createAmbulance', 'ambulance', ambulance)
            const localVarPath = `/ambulances/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ambulance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the ambulance
         * @summary Deletes ambulance
         * @param {string} ambulanceId pass id of the ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAmbulance: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deleteAmbulance', 'ambulanceId', ambulanceId)
            const localVarPath = `/ambulances/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get ambulance info
         * @summary Provides details of the ambulance
         * @param {string} ambulanceId pass id of the ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulance: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getAmbulance', 'ambulanceId', ambulanceId)
            const localVarPath = `/ambulances/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get list of all ambulances
         * @summary Provides the list of all ambulances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulanceEntries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ambulances/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update an ambulance
         * @summary Updates an ambulance
         * @param {string} ambulanceId pass id of the ambulance
         * @param {Ambulance} ambulance Ambulance template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAmbulance: async (ambulanceId: string, ambulance: Ambulance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('updateAmbulance', 'ambulanceId', ambulanceId)
            // verify required parameter 'ambulance' is not null or undefined
            assertParamExists('updateAmbulance', 'ambulance', ambulance)
            const localVarPath = `/ambulances/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ambulance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulanceAdminsApi - functional programming interface
 * @export
 */
export const AmbulanceAdminsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulanceAdminsApiAxiosParamCreator(configuration)
    return {
        /**
         * create new ambulance
         * @summary Creates new ambulance
         * @param {Ambulance} ambulance Ambulance template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAmbulance(ambulance: Ambulance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAmbulance(ambulance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the ambulance
         * @summary Deletes ambulance
         * @param {string} ambulanceId pass id of the ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAmbulance(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAmbulance(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get ambulance info
         * @summary Provides details of the ambulance
         * @param {string} ambulanceId pass id of the ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmbulance(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmbulanceWithAppointmentInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmbulance(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get list of all ambulances
         * @summary Provides the list of all ambulances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmbulanceEntries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ambulance>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmbulanceEntries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update an ambulance
         * @summary Updates an ambulance
         * @param {string} ambulanceId pass id of the ambulance
         * @param {Ambulance} ambulance Ambulance template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAmbulance(ambulanceId: string, ambulance: Ambulance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAmbulance(ambulanceId, ambulance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulanceAdminsApi - factory interface
 * @export
 */
export const AmbulanceAdminsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulanceAdminsApiFp(configuration)
    return {
        /**
         * create new ambulance
         * @summary Creates new ambulance
         * @param {Ambulance} ambulance Ambulance template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAmbulance(ambulance: Ambulance, options?: any): AxiosPromise<void> {
            return localVarFp.createAmbulance(ambulance, options).then((request) => request(axios, basePath)).catch();
        },
        /**
         * Use this method to delete the ambulance
         * @summary Deletes ambulance
         * @param {string} ambulanceId pass id of the ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAmbulance(ambulanceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAmbulance(ambulanceId, options).then((request) => request(axios, basePath)).catch();
        },
        /**
         * get ambulance info
         * @summary Provides details of the ambulance
         * @param {string} ambulanceId pass id of the ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulance(ambulanceId: string, options?: any): AxiosPromise<AmbulanceWithAppointmentInfo> {
            return localVarFp.getAmbulance(ambulanceId, options).then((request) => request(axios, basePath)).catch();
        },
        /**
         * get list of all ambulances
         * @summary Provides the list of all ambulances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulanceEntries(options?: any): AxiosPromise<Array<Ambulance>> {
            return localVarFp.getAmbulanceEntries(options).then((request) => request(axios, basePath)).catch();
        },
        /**
         * update an ambulance
         * @summary Updates an ambulance
         * @param {string} ambulanceId pass id of the ambulance
         * @param {Ambulance} ambulance Ambulance template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAmbulance(ambulanceId: string, ambulance: Ambulance, options?: any): AxiosPromise<void> {
            return localVarFp.updateAmbulance(ambulanceId, ambulance, options).then((request) => request(axios, basePath)).catch();
        },
    };
};

/**
 * AmbulanceAdminsApi - object-oriented interface
 * @export
 * @class AmbulanceAdminsApi
 * @extends {BaseAPI}
 */
export class AmbulanceAdminsApi extends BaseAPI {
    /**
     * create new ambulance
     * @summary Creates new ambulance
     * @param {Ambulance} ambulance Ambulance template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceAdminsApi
     */
    public createAmbulance(ambulance: Ambulance, options?: AxiosRequestConfig) {
        return AmbulanceAdminsApiFp(this.configuration).createAmbulance(ambulance, options).then((request) => request(this.axios, this.basePath)).catch();
    }

    /**
     * Use this method to delete the ambulance
     * @summary Deletes ambulance
     * @param {string} ambulanceId pass id of the ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceAdminsApi
     */
    public deleteAmbulance(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceAdminsApiFp(this.configuration).deleteAmbulance(ambulanceId, options).then((request) => request(this.axios, this.basePath)).catch();
    }

    /**
     * get ambulance info
     * @summary Provides details of the ambulance
     * @param {string} ambulanceId pass id of the ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceAdminsApi
     */
    public getAmbulance(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceAdminsApiFp(this.configuration).getAmbulance(ambulanceId, options).then((request) => request(this.axios, this.basePath)).catch();
    }

    /**
     * get list of all ambulances
     * @summary Provides the list of all ambulances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceAdminsApi
     */
    public getAmbulanceEntries(options?: AxiosRequestConfig) {
        return AmbulanceAdminsApiFp(this.configuration).getAmbulanceEntries(options).then((request) => request(this.axios, this.basePath)).catch();
    }

    /**
     * update an ambulance
     * @summary Updates an ambulance
     * @param {string} ambulanceId pass id of the ambulance
     * @param {Ambulance} ambulance Ambulance template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceAdminsApi
     */
    public updateAmbulance(ambulanceId: string, ambulance: Ambulance, options?: AxiosRequestConfig) {
        return AmbulanceAdminsApiFp(this.configuration).updateAmbulance(ambulanceId, ambulance, options).then((request) => request(this.axios, this.basePath)).catch();
    }
}


/**
 * AmbulanceUsersApi - axios parameter creator
 * @export
 */
export const AmbulanceUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * create new ambulance
         * @summary Creates new appointment
         * @param {MedicalAppointment} medicalAppointment Ambulance template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment: async (medicalAppointment: MedicalAppointment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'medicalAppointment' is not null or undefined
            assertParamExists('createAppointment', 'medicalAppointment', medicalAppointment)
            const localVarPath = `/appointments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(medicalAppointment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the appointment
         * @summary Deletes appointment
         * @param {string} appointmentId pass id of the appointment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointment: async (appointmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('deleteAppointment', 'appointmentId', appointmentId)
            const localVarPath = `/appointments/{appointmentId}`
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get appointment info
         * @summary Provides details of the ambulance
         * @param {string} appointmentId pass id of the appointment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointment: async (appointmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('getAppointment', 'appointmentId', appointmentId)
            const localVarPath = `/appointments/{appointmentId}`
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get all appointments
         * @summary Provides the ambulance waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentEntries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/appointments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update an appointment
         * @summary Updates an appointment
         * @param {string} appointmentId pass id of the appointment
         * @param {MedicalAppointment} [medicalAppointment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointment: async (appointmentId: string, medicalAppointment?: MedicalAppointment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('updateAppointment', 'appointmentId', appointmentId)
            const localVarPath = `/appointments/{appointmentId}`
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(medicalAppointment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulanceUsersApi - functional programming interface
 * @export
 */
export const AmbulanceUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulanceUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * create new ambulance
         * @summary Creates new appointment
         * @param {MedicalAppointment} medicalAppointment Ambulance template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointment(medicalAppointment: MedicalAppointment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppointment(medicalAppointment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the appointment
         * @summary Deletes appointment
         * @param {string} appointmentId pass id of the appointment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppointment(appointmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAppointment(appointmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get appointment info
         * @summary Provides details of the ambulance
         * @param {string} appointmentId pass id of the appointment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointment(appointmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicalAppointment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppointment(appointmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get all appointments
         * @summary Provides the ambulance waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointmentEntries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MedicalAppointment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppointmentEntries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update an appointment
         * @summary Updates an appointment
         * @param {string} appointmentId pass id of the appointment
         * @param {MedicalAppointment} [medicalAppointment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAppointment(appointmentId: string, medicalAppointment?: MedicalAppointment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAppointment(appointmentId, medicalAppointment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulanceUsersApi - factory interface
 * @export
 */
export const AmbulanceUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulanceUsersApiFp(configuration)
    return {
        /**
         * create new ambulance
         * @summary Creates new appointment
         * @param {MedicalAppointment} medicalAppointment Ambulance template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment(medicalAppointment: MedicalAppointment, options?: any): AxiosPromise<void> {
            return localVarFp.createAppointment(medicalAppointment, options).then((request) => request(axios, basePath)).catch();
        },
        /**
         * Use this method to delete the appointment
         * @summary Deletes appointment
         * @param {string} appointmentId pass id of the appointment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointment(appointmentId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAppointment(appointmentId, options).then((request) => request(axios, basePath)).catch();
        },
        /**
         * get appointment info
         * @summary Provides details of the ambulance
         * @param {string} appointmentId pass id of the appointment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointment(appointmentId: string, options?: any): AxiosPromise<MedicalAppointment> {
            return localVarFp.getAppointment(appointmentId, options).then((request) => request(axios, basePath)).catch();
        },
        /**
         * get all appointments
         * @summary Provides the ambulance waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentEntries(options?: any): AxiosPromise<Array<MedicalAppointment>> {
            return localVarFp.getAppointmentEntries(options).then((request) => request(axios, basePath)).catch();
        },
        /**
         * update an appointment
         * @summary Updates an appointment
         * @param {string} appointmentId pass id of the appointment
         * @param {MedicalAppointment} [medicalAppointment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointment(appointmentId: string, medicalAppointment?: MedicalAppointment, options?: any): AxiosPromise<void> {
            return localVarFp.updateAppointment(appointmentId, medicalAppointment, options).then((request) => request(axios, basePath)).catch();
        },
    };
};

/**
 * AmbulanceUsersApi - object-oriented interface
 * @export
 * @class AmbulanceUsersApi
 * @extends {BaseAPI}
 */
export class AmbulanceUsersApi extends BaseAPI {
    /**
     * create new ambulance
     * @summary Creates new appointment
     * @param {MedicalAppointment} medicalAppointment Ambulance template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceUsersApi
     */
    public createAppointment(medicalAppointment: MedicalAppointment, options?: AxiosRequestConfig) {
        return AmbulanceUsersApiFp(this.configuration).createAppointment(medicalAppointment, options).then((request) => request(this.axios, this.basePath)).catch();
    }

    /**
     * Use this method to delete the appointment
     * @summary Deletes appointment
     * @param {string} appointmentId pass id of the appointment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceUsersApi
     */
    public deleteAppointment(appointmentId: string, options?: AxiosRequestConfig) {
        return AmbulanceUsersApiFp(this.configuration).deleteAppointment(appointmentId, options).then((request) => request(this.axios, this.basePath)).catch();
    }

    /**
     * get appointment info
     * @summary Provides details of the ambulance
     * @param {string} appointmentId pass id of the appointment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceUsersApi
     */
    public getAppointment(appointmentId: string, options?: AxiosRequestConfig) {
        return AmbulanceUsersApiFp(this.configuration).getAppointment(appointmentId, options).then((request) => request(this.axios, this.basePath)).catch();
    }

    /**
     * get all appointments
     * @summary Provides the ambulance waiting list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceUsersApi
     */
    public getAppointmentEntries(options?: AxiosRequestConfig) {
        return AmbulanceUsersApiFp(this.configuration).getAppointmentEntries(options).then((request) => request(this.axios, this.basePath)).catch();
    }

    /**
     * update an appointment
     * @summary Updates an appointment
     * @param {string} appointmentId pass id of the appointment
     * @param {MedicalAppointment} [medicalAppointment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceUsersApi
     */
    public updateAppointment(appointmentId: string, medicalAppointment?: MedicalAppointment, options?: AxiosRequestConfig) {
        return AmbulanceUsersApiFp(this.configuration).updateAppointment(appointmentId, medicalAppointment, options).then((request) => request(this.axios, this.basePath)).catch();
    }
}


