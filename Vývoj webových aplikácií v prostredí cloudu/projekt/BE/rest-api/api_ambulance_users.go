/*
 * Projekt Api
 *
 * Projekt management
 *
 * API version: 1.0.0
 * Contact: aa@bb.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package rest_api

import (
	"log"
	"net/http"
	dbservice "projekt-backend/db-service"
	"projekt-backend/models"

	"github.com/gin-gonic/gin"
)

// CreateAppointment - Creates new appointment
func CreateAppointment(c *gin.Context) {
	var appointment models.MedicalAppointment
	if err := c.ShouldBindJSON(&appointment); err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	err := dbservice.CreateAppointment(&appointment)
	if err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	log.Println("CreateAppointment successfully created appointment with id: ", appointment.Id)
	c.JSON(http.StatusCreated, gin.H{"appointmentId": appointment.Id})
}

// DeleteAppointment - Deletes appointment
func DeleteAppointment(c *gin.Context) {
	res, err := dbservice.DeleteAppointment(c.Param("appointmentId"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, res)
}

// GetAppointment - Provides details of the appointment
func GetAppointment(c *gin.Context) {
	appointment, err := dbservice.GetAppointment(c.Param("appointmentId"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, appointment)
}

// GetAppointmentEntries - Provides the appointment waiting list
func GetAppointmentEntries(c *gin.Context) {
	appointments, err := dbservice.GetAllAppointments()
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, appointments)
}

// UpdateAppointment - Updates an appointment
func UpdateAppointment(c *gin.Context) {
	var appointment models.MedicalAppointment
	if err := c.ShouldBindJSON(&appointment); err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if appointment.Id != c.Param("appointmentId") {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Appointment ID cannot be changed"})
		return
	}

	updateRes, err := dbservice.UpdateAppointment(c.Param("appointmentId"), appointment)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, updateRes)
}
