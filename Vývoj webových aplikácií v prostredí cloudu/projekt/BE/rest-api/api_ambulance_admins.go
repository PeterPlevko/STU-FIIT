/*
 * Projekt Api
 *
 * Projekt management
 *
 * API version: 1.0.0
 * Contact: aa@bb.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package rest_api

import (
	"log"
	"net/http"
	dbservice "projekt-backend/db-service"
	"projekt-backend/models"

	"github.com/gin-gonic/gin"
)

// CreateAmbulance - Creates new ambulance
func CreateAmbulance(c *gin.Context) {
	var ambulance models.Ambulance
	if err := c.ShouldBindJSON(&ambulance); err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	err := dbservice.CreateAmbulance(&ambulance)
	if err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	log.Println("CreateAmbulance successfully created ambulance with id: ", ambulance.Id)
	c.JSON(http.StatusCreated, gin.H{"ambulanceId": ambulance.Id})
}

// DeleteAmbulance - Deletes ambulance
func DeleteAmbulance(c *gin.Context) {
	res, err := dbservice.DeleteAmbulance(c.Param("ambulanceId"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, res)
}

// GetAmbulance - Provides details of the ambulance
func GetAmbulance(c *gin.Context) {
	ambulance, err := dbservice.GetAmbulance(c.Param("ambulanceId"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	moneySum := 0
	appointments, err := dbservice.GetAmbulanceAppointments(c.Param("ambulanceId"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	for i := 0; i < len(appointments); i++ {
		moneySum += int(appointments[i].Cost)
	}

	c.JSON(http.StatusOK, gin.H{"ambulance": ambulance, "moneySum": moneySum, "appointments": appointments})
}

// GetAmbulanceEntries - Provides the list of all ambulances
func GetAmbulanceEntries(c *gin.Context) {
	ambulances, err := dbservice.GetAllAmbulances()
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, ambulances)
}

// UpdateAmbulance - Updates an ambulance
func UpdateAmbulance(c *gin.Context) {
	var ambulance models.Ambulance
	if err := c.ShouldBindJSON(&ambulance); err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if ambulance.Id != c.Param("ambulanceId") {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Ambulance ID cannot be changed"})
		return
	}

	updateRes, err := dbservice.UpdateAmbulance(c.Param("ambulanceId"), ambulance)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, updateRes)
}
